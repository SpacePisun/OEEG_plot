import io
from io import BytesIO
from pathlib import Path
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
from sidebar import render_sidebar
import streamlit as st

# ---- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ----
st.set_page_config(
    page_title="–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ MEAN¬±SEM",
    layout="wide",
    initial_sidebar_state="expanded"
)
st.title("–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ ‚Äî MEAN ¬± SEM")


# ---- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ----
@st.cache_data
def parse_data(file_text, groups, bands):
    lines = [line.strip() for line in file_text.splitlines()
             if not line.startswith("#") and line.strip()]

    columns = [("Time", ""), ("Marker", "")]
    for g in groups:
        for b in bands:
            columns.append((g, b))

    data = []
    for line in lines:
        parts = line.split()
        if not parts[-1].replace(".", "", 1).isdigit():
            parts = parts[:-1]
        row = [parts[0], parts[1]] + [float(x) for x in parts[2:]]
        data.append(row)

    df = pd.DataFrame(data, columns=pd.MultiIndex.from_tuples(columns))
    df[("Time", "")] = pd.to_datetime(df[("Time", "")], format="%H:%M:%S")
    start = df[("Time", "")].iloc[0]
    df[("Seconds", "")] = (df[("Time", "")] - start).dt.total_seconds()

    cols = list(df.columns)
    cols.remove(("Seconds", ""))
    idx = cols.index(("Time", "")) + 1
    cols.insert(idx, ("Seconds", ""))
    df = df[cols]
    return df


@st.cache_data
def calculate_mean_sem(df, groups, bands, window_size):
    n = len(df)
    block_idx = np.arange(n) // window_size
    block_groups = df.groupby(block_idx).groups

    block_times = []
    template = []
    for g in groups:
        mean_block = pd.DataFrame(np.nan, index=df.index, columns=df[g].columns)
        sem_block = pd.DataFrame(np.nan, index=df.index, columns=df[g].columns)
        for b in df[g].columns:
            for blk, idxs in block_groups.items():
                mean_val = df[g][b].loc[idxs].mean()
                sem_val = df[g][b].loc[idxs].sem(ddof=1)
                last_i = idxs[-1]
                mean_block.at[last_i, b] = mean_val
                sem_block.at[last_i, b] = sem_val
                # —Å–æ–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –±–ª–æ–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–∞–Ω–∞–ª–µ
                if g == groups[0] and b == df[g].columns[0]:
                    block_times.append(df[("Seconds", "")].iloc[last_i])

        mean_block.columns = pd.MultiIndex.from_tuples([(g, f"MEAN_{b}") for b in mean_block.columns])
        sem_block.columns = pd.MultiIndex.from_tuples([(g, f"SEM_{b}") for b in sem_block.columns])
        orig = df[g].copy()
        orig.columns = pd.MultiIndex.from_tuples([(g, b) for b in orig.columns])
        template.append(pd.concat([mean_block, sem_block, orig], axis=1))

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É - —Å–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π MultiIndex —Å 2 —É—Ä–æ–≤–Ω—è–º–∏
    time_sec_marker = pd.concat([
        df[("Time", "")],
        df[("Seconds", "")],
        df[("Marker", "")]
    ], axis=1)
    time_sec_marker.columns = pd.MultiIndex.from_tuples([
        ("Time", ""),
        ("Seconds", ""),
        ("Marker", "")
    ])

    df_final = pd.concat([time_sec_marker] + template, axis=1)
    mean_sem_cols = [col for col in df_final.columns if col[1].startswith("MEAN_") or col[1].startswith("SEM_")]

    # –ó–¥–µ—Å—å —Ç–æ–∂–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º - —è–≤–Ω–æ —Å–æ–∑–¥–∞–µ–º MultiIndex
    time_sec_marker_ms = pd.concat([
        df_final[("Time", "")],
        df_final[("Seconds", "")],
        df_final[("Marker", "")]
    ], axis=1)
    time_sec_marker_ms.columns = pd.MultiIndex.from_tuples([
        ("Time", ""),
        ("Seconds", ""),
        ("Marker", "")
    ])

    df_mean_sem = pd.concat([time_sec_marker_ms, df_final[mean_sem_cols]], axis=1)
    return df_final, df_mean_sem, block_times


@st.cache_data
def create_plot(df_clean, block_times, selected, bands, show_sem):
    # –°–ª–æ–≤–∞—Ä—å —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç–æ—Ç–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
    band_colors = {
        "–£–ü–ü(<0.5Hz)": "#000000",
        "Delta(0.5-4)": "#ff0000",
        "Theta(4-7)": "#7fb310",
        "Alpha(8-14)": "#4f2186",
        "Beta(14-30)": "#009cca",
        "Gamma(30-95)": "#CDA434"
    }
    x = np.array(block_times)

    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å –¥–≤—É–º—è –æ—Å—è–º–∏ (–¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤)
    fig, ax1 = plt.subplots(figsize=(15, 6))
    ax2 = ax1.twinx()

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    for band in bands:
        mean_col = (selected, f"MEAN_{band}")
        sem_col = (selected, f"SEM_{band}")

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if mean_col not in df_clean.columns:
            continue

        # –§–∏–ª—å—Ç—Ä—É–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è
        df_subset = df_clean[[mean_col, sem_col]].dropna()
        y_vals = df_subset[mean_col].values

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ x-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        x_subset = x[df_subset.index]

        # –í—ã–±–∏—Ä–∞–µ–º –æ—Å—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        ax = ax2 if band == "–£–ü–ü(<0.5Hz)" else ax1

        # –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é –≥—Ä–∞—Ñ–∏–∫–∞
        ax.plot(x_subset, y_vals, label=band, color=band_colors[band],
                linewidth=5 if band == "–£–ü–ü(<0.5Hz)" else 3)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if show_sem and sem_col in df_clean.columns:
            sem_vals = df_subset[sem_col].values
            ax.errorbar(x_subset, y_vals, yerr=sem_vals, ecolor=band_colors[band],
                        elinewidth=1.5, capsize=3, linestyle='', alpha=0.7)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤
    markers = df_clean[("Marker", "")].fillna('').astype(str).str.strip().values
    for xi, mi in zip(x, markers):
        if mi:
            ax1.axvline(x=xi, color='red', linestyle='--', alpha=0.5)
            ax1.text(xi, ax1.get_ylim()[1] * 0.95, mi,
                     fontsize=10, ha='center', va='top', rotation=90,
                     backgroundcolor='white', color='red')

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–µ–≥–µ–Ω–¥—ã
    h1, l1 = ax1.get_legend_handles_labels()
    h2, l2 = ax2.get_legend_handles_labels()
    ax1.legend(h1 + h2, l1 + l2, loc="upper center", bbox_to_anchor=(0.5, -0.1), ncol=6, frameon=False)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π –∏ —Å–µ—Ç–∫–∏
    ax1.yaxis.set_major_locator(ticker.MultipleLocator(5))
    ax1.set_xlabel('–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏, —Å')
    ax1.set_ylabel('–ê–º–ø–ª–∏—Ç—É–¥–∞ –≠–≠–ì, –º–∫–í')
    ax2.set_ylabel('–ê–º–ø–ª–∏—Ç—É–¥–∞ –£–ü–ü, –º–∫–í')
    plt.grid(True)
    plt.tight_layout()

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–∞–Ω–∏—Ü –æ—Å–µ–π
    ax1.set_xlim(0, x.max())
    ax2.set_xlim(ax1.get_xlim())

    return fig


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è DataFrame —Ç–æ–ª—å–∫–æ —Å MEAN (–±–µ–∑ SEM)
def create_mean_only_df(df_clean):
    # –ò—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
    time_cols = [("Time", ""), ("Seconds", ""), ("Marker", "")]
    # –¢–æ–ª—å–∫–æ MEAN –∫–æ–ª–æ–Ω–∫–∏ (–±–µ–∑ SEM)
    mean_cols = [col for col in df_clean.columns if col[1].startswith("MEAN_")]

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π DataFrame
    return df_clean[time_cols + mean_cols].copy()


# sidebar –∏ –∑–∞–≥—Ä—É–∑–∫–∞
render_sidebar()
if "file_content" not in st.session_state or "uploaded_name" not in st.session_state:
    st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ!")
    st.stop()
if "save_dir" not in st.session_state:
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.session_state["save_dir"] = str(Path.cwd())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
if "show_sem" not in st.session_state:
    st.session_state.show_sem = False
if "selected_group" not in st.session_state:
    st.session_state.selected_group = None
if "processing_started" not in st.session_state:
    st.session_state.processing_started = False

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
file_name = st.session_state["uploaded_name"]
base_name = Path(file_name).stem
output_dir = Path(base_name)
output_dir.mkdir(parents=True, exist_ok=True)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
groups = ["AVERAGE", "0[P3]15", "1[F3]16", "2[Cz]12", "3[P4]11", "4[F4]10", "5[Fz]32", "6[T3]36", "7[T4]27"]
bands = ["–£–ü–ü(<0.5Hz)", "Delta(0.5-4)", "Theta(4-7)", "Alpha(8-14)", "Beta(14-30)", "Gamma(30-95)"]

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ü–ï–†–ï–î –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
window_size = st.number_input("–†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∏ –æ—à–∏–±–∫–∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∑–Ω–∞—á–µ–Ω–∏—è–º",
                              min_value=1, value=10, step=1, format="%d")

# –ö–ù–û–ü–ö–ê –ó–ê–ü–£–°–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò
st.markdown("---")
if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö", type="primary", key="start_processing"):
    st.session_state.processing_started = True
    st.rerun()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –Ω–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞
if not st.session_state.processing_started:
    st.info("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã—à–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö' –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞.")
    st.stop()

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø –¢–û–õ–¨–ö–û –ü–û–°–õ–ï –ù–ê–ñ–ê–¢–ò–Ø –ö–ù–û–ü–ö–ò ==========

st.markdown("---")
st.header("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

# –ü–∞—Ä—Å–∏–Ω–≥ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
with st.spinner('–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö...'):
    df = parse_data(st.session_state["file_content"], groups, bands)
    df[("Marker", "")] = df[("Marker", "")].astype(str).str.replace('.', '', regex=False)

# –†–∞—Å—á–µ—Ç MEAN –∏ SEM
with st.spinner('–†–∞—Å—á—ë—Ç MEAN –∏ SEM...'):
    df_final, df_mean_sem, block_times = calculate_mean_sem(df, groups, bands, window_size)

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
with st.spinner('–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...'):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ MEAN/SEM
    mean_sem_cols = [
        col for col in df_mean_sem.columns
        if col[1].startswith("MEAN_") or col[1].startswith("SEM_")
    ]

    # –°—Ç–æ–ª–±–µ—Ü —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
    marker_col = ("Marker", "")

    # –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–º –º–∞—Ä–∫–µ—Ä—ã –∏–∑ —Å—Ç—Ä–æ–∫ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ª–µ–¥—É—é—â–∏–µ –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    df_with_moved_markers = df_mean_sem.copy()
    pending_markers = []
    for i in range(len(df_with_moved_markers)):
        row_has_data = df_with_moved_markers.loc[i, mean_sem_cols].notna().any()
        current_marker = df_with_moved_markers.at[i, marker_col]

        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–º–µ–µ—Ç –¥–∞–Ω–Ω—ã–µ
        if pending_markers and row_has_data:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã —Ç–æ–ª—å–∫–æ —Å –ø—Ä–æ–±–µ–ª–æ–º
            combined_pending_markers = " ".join([m.strip() for m in pending_markers])

            # –ï—Å–ª–∏ –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ —É–∂–µ –µ—Å—Ç—å –º–∞—Ä–∫–µ—Ä, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö
            if pd.notna(current_marker) and str(current_marker).strip():
                current_marker_clean = str(current_marker).strip()
                df_with_moved_markers.at[i, marker_col] = f"{combined_pending_markers} {current_marker_clean}"
            else:
                df_with_moved_markers.at[i, marker_col] = combined_pending_markers

            pending_markers = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤

        # –ï—Å–ª–∏ –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å –º–∞—Ä–∫–µ—Ä, –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        elif pd.notna(current_marker) and str(current_marker).strip() and not row_has_data:
            pending_markers.append(str(current_marker).strip())
            df_with_moved_markers.at[i, marker_col] = None  # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Ä–∫–µ—Ä

    # –ú–∞—Å–∫–∞: –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ MEAN/SEM –∫–æ–ª–æ–Ω–∫–∞—Ö
    mask = df_with_moved_markers[mean_sem_cols].notna().any(axis=1)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
    df_clean = df_with_moved_markers.loc[mask].reset_index(drop=True)

st.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
st.header("–¢–∞–±–ª–∏—Ü–∞ MEAN –∏ SEM")
mean_disp = df_clean.copy()
mean_disp[("Time", "")] = mean_disp[("Time", "")].dt.strftime("%H:%M:%S")
st.dataframe(mean_disp)

# –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
col1, col2 = st.columns(2)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ MEAN+SEM –≤ Excel
if col1.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É MEAN+SEM –≤ Excel", key="save_mean_sem_btn"):
    masked_df = df_clean.copy()
    dest_root = Path(st.session_state['save_dir']) / base_name
    dest_root.mkdir(parents=True, exist_ok=True)
    masked_path = dest_root / f"{base_name}_MEAN_SEM_{window_size}.xlsx"
    with pd.ExcelWriter(masked_path, engine='xlsxwriter', datetime_format='hh:mm:ss') as writer:
        masked_df.to_excel(writer, sheet_name='MEAN_SEM', index=True)
    st.success(f"–§–∞–π–ª —Å MEAN+SEM —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {masked_path}")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ MEAN –≤ Excel
if col2.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ç–æ–ª—å–∫–æ MEAN –≤ Excel", key="save_mean_only_btn"):
    mean_only_df = create_mean_only_df(df_clean)
    dest_root = Path(st.session_state['save_dir']) / base_name
    dest_root.mkdir(parents=True, exist_ok=True)
    mean_path = dest_root / f"{base_name}_MEAN_ONLY_{window_size}.xlsx"
    with pd.ExcelWriter(mean_path, engine='xlsxwriter', datetime_format='hh:mm:ss') as writer:
        mean_only_df.to_excel(writer, sheet_name='MEAN_ONLY', index=True)
    st.success(f"–§–∞–π–ª —Ç–æ–ª—å–∫–æ —Å MEAN —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {mean_path}")

# –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
st.header("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞")
available_groups = [g for g in groups if (g, f"MEAN_{bands[0]}") in df_clean.columns]
cols = st.columns(len(available_groups))
for i, col in enumerate(cols):
    grp = available_groups[i]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏
    button_type = "primary" if grp == st.session_state.selected_group else "secondary"

    if col.button(grp, key=f"btn_{grp}", type=button_type):
        st.session_state.selected_group = grp
        st.rerun()

# –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å SEM
if st.button('–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏' if not st.session_state.show_sem else '–°–∫—Ä—ã—Ç—å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏', key='toggle_sem_btn'):
    st.session_state.show_sem = not st.session_state.show_sem
    st.rerun()

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
if st.session_state.selected_group:
    selected = st.session_state.selected_group
    st.header(f"{selected} ‚Äî {'MEAN + SEM' if st.session_state.show_sem else '—Ç–æ–ª—å–∫–æ MEAN'}")
    with st.spinner('–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞...'):
        fig = create_plot(df_clean, block_times, selected, bands, st.session_state.show_sem)
        st.pyplot(fig)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
    suffix = f"{selected}_mean_sem_{window_size}" if st.session_state.show_sem else f"{selected}_mean_{window_size}"
    output_file = output_dir / f"{suffix}.png"

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –≤ –ø–∞–ø–∫—É", key="save_btn"):
        root = Path(st.session_state["save_dir"] or ".")
        dest_dir = root / base_name
        dest_dir.mkdir(parents=True, exist_ok=True)
        output_path = dest_dir / f"{suffix}.png"
        fig.savefig(output_path)
        st.success(f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {output_path}")
else:
    st.info("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")